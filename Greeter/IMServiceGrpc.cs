// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Greeter
{
  public static class IMService
  {
    static readonly string __ServiceName = "IMService.IMService";

    static readonly Marshaller<global::Greeter.CreateGroup> __Marshaller_CreateGroup = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.CreateGroup.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.GroupResult> __Marshaller_GroupResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.GroupResult.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.UpdateGroupName> __Marshaller_UpdateGroupName = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.UpdateGroupName.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.GroupId> __Marshaller_GroupId = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.GroupId.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.AddMembers> __Marshaller_AddMembers = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.AddMembers.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.OutGroup> __Marshaller_OutGroup = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.OutGroup.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.RemoveMembers> __Marshaller_RemoveMembers = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.RemoveMembers.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.Peers> __Marshaller_Peers = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.Peers.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.Groups> __Marshaller_Groups = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.Groups.Parser.ParseFrom);
    static readonly Marshaller<global::Greeter.Systems> __Marshaller_Systems = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greeter.Systems.Parser.ParseFrom);

    static readonly Method<global::Greeter.CreateGroup, global::Greeter.GroupResult> __Method_Create = new Method<global::Greeter.CreateGroup, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_CreateGroup,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.UpdateGroupName, global::Greeter.GroupResult> __Method_UpdateName = new Method<global::Greeter.UpdateGroupName, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "UpdateName",
        __Marshaller_UpdateGroupName,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.GroupId, global::Greeter.GroupResult> __Method_Delete = new Method<global::Greeter.GroupId, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_GroupId,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.AddMembers, global::Greeter.GroupResult> __Method_AddMember = new Method<global::Greeter.AddMembers, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "AddMember",
        __Marshaller_AddMembers,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.OutGroup, global::Greeter.GroupResult> __Method_Out = new Method<global::Greeter.OutGroup, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "Out",
        __Marshaller_OutGroup,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.RemoveMembers, global::Greeter.GroupResult> __Method_RemoveMember = new Method<global::Greeter.RemoveMembers, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "RemoveMember",
        __Marshaller_RemoveMembers,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.Peers, global::Greeter.GroupResult> __Method_SendPeer = new Method<global::Greeter.Peers, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "SendPeer",
        __Marshaller_Peers,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.Groups, global::Greeter.GroupResult> __Method_SendGroup = new Method<global::Greeter.Groups, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "SendGroup",
        __Marshaller_Groups,
        __Marshaller_GroupResult);

    static readonly Method<global::Greeter.Systems, global::Greeter.GroupResult> __Method_SendSystem = new Method<global::Greeter.Systems, global::Greeter.GroupResult>(
        MethodType.Unary,
        __ServiceName,
        "SendSystem",
        __Marshaller_Systems,
        __Marshaller_GroupResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Greeter.IMServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IMService</summary>
    public abstract class IMServiceBase: ContextBoundObject
        {
      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> Create(global::Greeter.CreateGroup request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> UpdateName(global::Greeter.UpdateGroupName request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> Delete(global::Greeter.GroupId request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> AddMember(global::Greeter.AddMembers request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> Out(global::Greeter.OutGroup request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> RemoveMember(global::Greeter.RemoveMembers request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> SendPeer(global::Greeter.Peers request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> SendGroup(global::Greeter.Groups request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greeter.GroupResult> SendSystem(global::Greeter.Systems request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IMService</summary>
    public class IMServiceClient : ClientBase<IMServiceClient>
    {
      /// <summary>Creates a new client for IMService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IMServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IMService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IMServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IMServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IMServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Greeter.GroupResult Create(global::Greeter.CreateGroup request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult Create(global::Greeter.CreateGroup request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> CreateAsync(global::Greeter.CreateGroup request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> CreateAsync(global::Greeter.CreateGroup request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Greeter.GroupResult UpdateName(global::Greeter.UpdateGroupName request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateName(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult UpdateName(global::Greeter.UpdateGroupName request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateName, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> UpdateNameAsync(global::Greeter.UpdateGroupName request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateNameAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> UpdateNameAsync(global::Greeter.UpdateGroupName request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateName, null, options, request);
      }
      public virtual global::Greeter.GroupResult Delete(global::Greeter.GroupId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult Delete(global::Greeter.GroupId request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> DeleteAsync(global::Greeter.GroupId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> DeleteAsync(global::Greeter.GroupId request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::Greeter.GroupResult AddMember(global::Greeter.AddMembers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddMember(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult AddMember(global::Greeter.AddMembers request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddMember, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> AddMemberAsync(global::Greeter.AddMembers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddMemberAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> AddMemberAsync(global::Greeter.AddMembers request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddMember, null, options, request);
      }
      public virtual global::Greeter.GroupResult Out(global::Greeter.OutGroup request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Out(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult Out(global::Greeter.OutGroup request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Out, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> OutAsync(global::Greeter.OutGroup request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return OutAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> OutAsync(global::Greeter.OutGroup request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Out, null, options, request);
      }
      public virtual global::Greeter.GroupResult RemoveMember(global::Greeter.RemoveMembers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveMember(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult RemoveMember(global::Greeter.RemoveMembers request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveMember, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> RemoveMemberAsync(global::Greeter.RemoveMembers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveMemberAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> RemoveMemberAsync(global::Greeter.RemoveMembers request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveMember, null, options, request);
      }
      public virtual global::Greeter.GroupResult SendPeer(global::Greeter.Peers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPeer(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult SendPeer(global::Greeter.Peers request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendPeer, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendPeerAsync(global::Greeter.Peers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPeerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendPeerAsync(global::Greeter.Peers request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendPeer, null, options, request);
      }
      public virtual global::Greeter.GroupResult SendGroup(global::Greeter.Groups request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendGroup(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult SendGroup(global::Greeter.Groups request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendGroup, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendGroupAsync(global::Greeter.Groups request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendGroupAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendGroupAsync(global::Greeter.Groups request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendGroup, null, options, request);
      }
      public virtual global::Greeter.GroupResult SendSystem(global::Greeter.Systems request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendSystem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greeter.GroupResult SendSystem(global::Greeter.Systems request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendSystem, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendSystemAsync(global::Greeter.Systems request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendSystemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Greeter.GroupResult> SendSystemAsync(global::Greeter.Systems request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendSystem, null, options, request);
      }
      protected override IMServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IMServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(IMServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_UpdateName, serviceImpl.UpdateName)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_AddMember, serviceImpl.AddMember)
          .AddMethod(__Method_Out, serviceImpl.Out)
          .AddMethod(__Method_RemoveMember, serviceImpl.RemoveMember)
          .AddMethod(__Method_SendPeer, serviceImpl.SendPeer)
          .AddMethod(__Method_SendGroup, serviceImpl.SendGroup)
          .AddMethod(__Method_SendSystem, serviceImpl.SendSystem).Build();
    }

  }
}
#endregion
